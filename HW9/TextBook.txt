2. Directed Acyclic Graph (DAG)

DAG complexity is depend on number of edges and vertexes.

The algorithm I found was:

According to Kahn's Algorithm

/////////////////////////////////////////////////////////

L ? Empty list that will contain the sorted elements
S ? Set of all nodes with no incoming edges
while S is non-empty do
    remove a node n from S
    add n to tail of L
    for each node m with an edge e from n to m do
        remove edge e from the graph
        if m has no other incoming edges then
            insert m into S
if graph has edges then
    return error (graph has at least one cycle)
else 
    return L (a topologically sorted order)

/////////////////////////////////////////////////////////

Vertex: n	Edge: m

Complexity: Theta(n + m)

-> O(log2 n)



Resource
https://en.wikipedia.org/wiki/Topological_sorting#CITEREFDekelNassimiSahni1981
https://en.wikipedia.org/wiki/Directed_acyclic_graph
http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII8.1/ptII/ptolemy/graph/DirectedAcyclicGraph.java
http://stackoverflow.com/questions/15460661/different-ways-to-implement-dags-in-java
http://mathworld.wolfram.com/AcyclicDigraph.html