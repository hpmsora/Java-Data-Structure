Won Yong Ha(woha)

CSCI-C 343

3.3)
2 -> log(3)n -> log(2)n -> n^(2/3) -> 20n -> 4n^2 -> 3^n -> n!

3.8)
A)
T(n) = c1 * n
     c1 * n		<= c1 * n, if(n > 0) & c > 0)
     So, T(n) <- O(n) and c = c1, if(n0 > 1)

     c1 * n		>= c * n, if(n > 0, c > 0)
     So, T(n) <- Omega(n) and c = c1, if(n0 > 1)

B)
T(n) = c2*n^3 + c3
     c2 * n^3 + c3	<= c2 * n^3 + c3 * n^3
     	      		<= (c2 + c3)n^3, if(n > 0 & c > 0)
     So, T(n) <- O(n^3) and c = c2 + c3, if(n0 > 1)

     c2 * n^3 + c3	>= c2 * n^3
     	      		>= c * n^3, if (n > 0, c > 0)
     So, T(n) <- Omega(n^3) and c = c2, if(n0 > 1)

C)
T(n) = c4* n * log n + c5 * n
     c4 * n * log n    <= c4 * n * log n + c5 * n * log n
     	      	       <= (c4 + c5) * n * log n
		       <= c * n * log n, if(c > 0, n > 0)
     So, T(n) <- O(n * log n), c = c4 + c5, if(a is the base of logarithm)

     c4 * n * log n    >= c4 * n * log n
     	      	       >= c * n * log n, if(c > 0, n > 0)
     So, T(n) <- Omega(n * log n), c = c4, if(a is the base of logarithm)

4.1)
See the TextBook.java delete section

4.3)

n > (D * E) / (P + E)
P = size of the pointer
E = size of the data elements stored
D = maximum number of elements that can be stored in an array

A)
n > (20 * 8) / (4 + 8)
n > 160 / 12 = 13.3333...

B)
n > (30 * 2) / (4 + 2)
n > 60 / 6 = 10

C)
n > (30 * 1) / (1 + 4)
n > 30 / 5 = 6

D)
n > (32 * 40) / (4 + 32)
n > 1280 / 36 = 35.5555...
